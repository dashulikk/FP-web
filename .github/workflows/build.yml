name: Python Web App Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main    
  workflow_dispatch:    

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: 1.20

    # Step 3: Install dependencies including k6
    - name: Install dependencies
      run: |
        python -m venv venv
        . venv/bin/activate
        pip install -r requirements.txt
        # Install k6
        sudo apt install snapd
        sudo snap install k6
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        echo "/usr/local/go/bin" >> $GITHUB_PATH
        sudo go install go.k6.io/xk6/cmd/xk6@latest
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        xk6 build --with github.com/grafana/xk6-output-influxdb

    # Step 4: Run unit tests with pytest and generate test report
    - name: Run unit tests with pytest
      run: |
        . venv/bin/activate
        pytest --junitxml=report.xml
      continue-on-error: false

    # Step 5: Upload test report as an artifact
    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: pytest-report
        path: report.xml

    # Step 6: Run k6 performance tests and export to InfluxDB
    - name: Run k6 performance tests
      env:
        K6_INFLUXDB_ORGANIZATION: university
        K6_INFLUXDB_BUCKET: k6data
        K6_INFLUXDB_TOKEN: flOyFmlyXDv69oTn2TVUmN0qxOvu02oHveer-4UjkV_LbqqeeQjKbwSIQjTvyPenSvKltAjHJyS6Jcj9DiFxWQ==
      run: |
        ./k6 run -o xk6-influxdb=http://localhost:8090 load_test.js --summary-export=output.json

    # Step 7: Upload the k6 JSON report as an artifact
    - name: Upload k6 JSON report
      uses: actions/upload-artifact@v3
      with:
        name: k6-output-json
        path: output.json

    # Step 8: Zip the web app (for simplicity, zipping the whole project)
    - name: Create artifact
      run: zip -r web_app.zip .

    # Step 9: Upload the artifact
    - name: Upload web app artifact
      uses: actions/upload-artifact@v3
      with:
        name: web-app-artifact
        path: web_app.zip
