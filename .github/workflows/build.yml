name: Python Web App Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main    
  workflow_dispatch:    

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    # Step 3: Install dependencies and k6
    - name: Install dependencies
      run: |
        python -m venv venv
        . venv/bin/activate
        pip install -r requirements.txt
        # Install k6 via snap
        sudo apt update
        sudo apt install -y snapd
        sudo snap install k6

    # Step 4: Start FastAPI application in the background
    - name: Start FastAPI app
      run: |
        . venv/bin/activate
        nohup uvicorn main:app --host 0.0.0.0 --port 8000 &
      env:
        PYTHONPATH: .

    # Step 5: Wait for server to be ready
    - name: Wait for server to be ready
      run: |
        for i in {1..10}; do
          if nc -zv localhost 8000; then
            echo "Server is ready!"
            break
          fi
          echo "Waiting for server..."
          sleep 3
        done

    # Step 6: Run unit tests with pytest and generate test report
    - name: Run unit tests with pytest
      run: |
        . venv/bin/activate
        pytest --junitxml=report.xml
      continue-on-error: false

    # Step 7: Upload test report as an artifact
    - name: Upload test report
      uses: actions/upload-artifact@v3
      with:
        name: pytest-report
        path: report.xml

    # Step 8: Run k6 performance tests and export to JSON
    - name: Run k6 performance tests
      run: |
        k6 run load_test.js --summary-export=output.json

    # Step 9: Upload the k6 JSON report as an artifact
    - name: Upload k6 JSON report
      uses: actions/upload-artifact@v3
      with:
        name: k6-output-json
        path: output.json

    # Step 10: Zip the web app (for simplicity, zipping the whole project)
    - name: Create artifact
      run: zip -r web_app.zip .

    # Step 11: Upload the artifact
    - name: Upload web app artifact
      uses: actions/upload-artifact@v3
      with:
        name: web-app-artifact
        path: web_app.zip
